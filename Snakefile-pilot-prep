import os
import math
import gzip
from pathlib import Path


configfile: "config.yml"
singularity: "methy-qtl.sif"

mem_step_size = 6400


rule invnorm_betas:
    input: 
        config["betas_rds"]
    output:
        "phenotypes/betas.sorted_samples.invnorm.tsv.gz"
    threads: 1
    resources:
        mem_mb = 128000
    shell:
        """
        set -eu

        process-methy-rds.R {input} {output}
        """

rule bed_file:
    input:
        vcf = "genotypes/{chrom}.pass_variants.bcf", #config["genotype_expression"],
        betas = config["betas_rds"],
        array_manifest = config["array_manifest"]
    output:
        "bed_files/betas.{chrom}.bed.gz"
    threads: 1
    resources:
        mem_mb = 64000
    shell:
        """
        set +e
        tmp_dir=`mktemp -d`
        tmp_out=$tmp_dir/$(basename {output})

        header_hash=$(zcat {input.array_manifest} | head -n1 | md5sum | cut -f1 -d' ')
        if [[ $header_hash != "c72b2e7275bdb062c33d895b2bb68a4a" ]]; then
          >&2 echo "Error: unexpected array manifest column names (hashes: c72b2e7275bdb062c33d895b2bb68a4a vs $header_hash)"
          exit 1
        fi 

        set -uo pipefail
        bcftools query -l {input.vcf} > $tmp_dir/genotype_ids.txt
        zcat {input.array_manifest} | awk -F'\t' '$1=="{wildcards.chrom}" {{print $9}}' | sort > $tmp_dir/probe_ids.txt

        ./subset_rds_to_tsv.R {input.betas} $tmp_dir/probe_ids.txt $tmp_dir/genotype_ids.txt | join -t $'\t' --header <(zcat {input.array_manifest} | awk -F'\t' 'NR=1||$1=="{wildcards.chrom}" {{b=($10==0?$2+1:$2); print $9"\t"$1"\t"b"\t"b+1"\t"$9}}' | awk -F'\t' 'NR==1 {{print $0;next}} {{print $0 | "sort -k1,1"}}') /dev/stdin | cut -f2- | awk -F'\t' -v 'OFS=\t' 'NR==1 {{ $1="#chr"; $2="start"; $3="end"; $4="probe_id"; print $0;next}} {{print $0| "sort -k2,2 --numeric-sort"}}' | bgzip > $tmp_out && tabix -p bed $tmp_out
        rc=$?

        if [[ $rc == 0 ]]; then
          mv $tmp_out {output} &&
          mv $tmp_out.tbi {output}.tbi
          rc=$?
        fi
        
        rm -r $tmp_dir
        exit $rc
        """

#rule bed_file_old:
#    input:
#        rules.invnorm_betas_with_positions.output
#    output:
#        "bed_files/betas.sorted_samples.invnorm.ids_fixed.samples_filtered.{chrom}.bed.gz"
#    threads: 1
#    resources:
#        mem_mb = 6400
#    shell:
#
#        """
#        set -euo pipefail
#        (echo '#chr' start end probe_id $(zcat {input} | head -n1 | cut -f5-) | tr " " "\t"; zcat {input} | awk -F'\t' 'BEGIN {{OFS="\t"}} {{if ($1=="{wildcards.chrom}") {{$3=$2+1; print}}}}' | sort -k2,2 --numeric-sort) | bgzip > {output}
#        tabix {output}
#        """


rule genotype_subset:
    input:
        vcf = config["genotype_expression"],
        id_convert_map = config["sample_id_convert_map"]
    output:
        "genotypes/{chrom}.pass_variants.bed"
    threads: 2
    resources:
        mem_mb = lambda wc, attempt:  mem_step_size + mem_step_size * attempt
    shell:
        """
        set -uo pipefail
        tmp_dir=`mktemp -d`

        plink_prefix_path=${{tmp_dir}}/$(basename {output} .bed)
        bcftools view -S <(cut -f1 {input.id_convert_map} | grep -v "^NA$" | grep -v "NWD359245\|NWD439884\|NWD550834\|NWD582434\|NWD609471\|NWD741494") {input.vcf} --include "FILTER='PASS'" -Ou \
          | bcftools view --include 'AC>0&&AC!=AN' -Ou \
          | bcftools annotate --set-id '%CHROM:%POS:%REF:%ALT' -Ou \
          | bcftools reheader --samples {input.id_convert_map} /dev/stdin \
          | bcftools view -S <(cut -f2 {input.id_convert_map} | sort -k2,2) --force-samples -Ob -o ${{plink_prefix_path}}.bcf
        bcftools index ${{plink_prefix_path}}.bcf

        #bcftools view --include '(AC/AN)>0.01' ${{plink_prefix_path}}.bcf -Ob -o ${{plink_prefix_path}}.min_af_0.01.bcf
        #bcftools index ${{plink_prefix_path}}.min_af_0.01.bcf

        plink2 --make-bed --output-chr chrM --bcf ${{plink_prefix_path}}.bcf --threads 4 --out $plink_prefix_path
        mv ${{plink_prefix_path}}* genotypes/
        """


rule all_genotype_subsets:
    input:
        ["genotypes/chr" + c + ".pass_variants.bed" for c in [str(i) for i in range(1, 23)] + ["X"]]


rule null_genotype_subset:
    input:
        rules.genotype_subset.output
    output:
        "genotypes_null/{chrom}.pass_variants.null.bed"
    threads: 2
    resources:
        mem_mb = lambda wc, attempt:  mem_step_size + mem_step_size * attempt
    shell:
        """
        set -uo pipefail
        plink_prefix_path=$(dirname {output})/$(basename {output} .bed)
        input_bcf=$(dirname {input})/$(basename {input} .bed).bcf
        bcftools reheader --samples <(bcftools query -l $input_bcf | sort --random-sort) $input_bcf -o ${{plink_prefix_path}}.bcf
        bcftools index --force ${{plink_prefix_path}}.bcf
        plink2 --make-bed --output-chr chrM --bcf ${{plink_prefix_path}}.bcf --threads 4 --out $plink_prefix_path
        """

rule pcs:
    input:
        rules.bed_file.output
    output:
        "pcs/betas.sorted_samples.invnorm.ids_fixed.samples_filtered.loadings.tsv",
        "pcs/betas.sorted_samples.invnorm.ids_fixed.samples_filtered.pcs_variance_explained.txt"
    params:
        prefix = "pcs/betas.sorted_samples.invnorm.ids_fixed.samples_filtered"
    threads: 2
    resources:
        mem_mb = 64000
    shell:
        """
        set -eu
       
        generate-methy-pcs.R {input} {params.prefix}
        tmp={params.prefix}.loadings.tsv.tmp
        (printf "sample_id\t$(head -n1 $tmp | cut -f2-)\n"; tail -n+2 $tmp) > {output[0]}
        rm $tmp
        """


rule covariates:
    input:
        sample_sheet = "MISSING.csv",
        geno_pcs = "MISSING.tsv",
        methy_pcs = rules.pcs.output[0]
    output:
        "covariates/sex_gpcs_mpcs.tsv", "covariates/sex_gpcs_mpcs.transposed.tsv"
    threads: 1
    resources:
        mem_mb = mem_step_size
    shell:
        """
        set -euo pipefail

        out1=$(echo {output[0]} | rev | cut -f3- -d'.' | rev).tmp
        head -n1 {input.sample_sheet} | cut -f1,3 -d',' | tr "," "\t" | join --header -t$'\t' <(head -n1 {input.geno_pcs}) /dev/stdin > $out1
        tail -n+2 {input.sample_sheet} | cut -f1,3 -d',' | tr "," "\t" | awk -F'\t' 'BEGIN{{OFS="\t"}} {{if ($2=="F") {{ $2=1 }} else {{$2=0}}}} {{print}}' | sort -k1,1 | join -t$'\t' <(tail -n+2 {input.geno_pcs} | sort -k1,1) /dev/stdin >> $out1

        join --header -t$'\t' <(head -n1 $out1) <(head -n1 {input.methy_pcs}) > {output[0]}
        join -t$'\t' <(tail -n+2 $out1) <(tail -n+2 {input.methy_pcs}) >> {output[0]}

        cat {output[0]} | transpose_tsv.R > {output[1]}
        """


rule methy_pcs_plot:
    input:
        rules.covariates.output[0]
    output:
        "plots/methy_pcs.png"
    shell:
        """
        Rscript plot-mpcs.R {input} {output}
        """

rule methy_pcs_variance_explained_plot:
    input:
        rules.pcs.output[1]
    output:
        "plots/methy_pcs_variance_explained.png"
    shell:
        """
        set -euo pipefail
        paste <(seq 1 50) <(head -n 50 {input}) | gnuplot --persist -e 'set term png size 1080,720; set xrange [0:51]; set xlabel "PC"; set ylabel "% Variance Explained"; set style fill solid noborder; set boxwidth 0.8; plot "-" u 1:2 w boxes notitle' > {output}
        """

rule null_covariates:
    input:
        vcf = rules.genotype_subset.output[0].format(chrom="chr20"),
        vcf_null = rules.null_genotype_subset.output[0].format(chrom="chr20"),
        cov = "covariates/joint_invnorm_loadings.ids_fixed.sex_study_pcs_1_100.recode.with_geno_pcs.tsv"
    output:
        "covariates_null/joint_invnorm_loadings.ids_fixed.sex_study_pcs_1_100.recode.with_geno_pcs.null2.tsv",
        "covariates_null/joint_invnorm_loadings.ids_fixed.sex_study_pcs_1_100.recode.with_geno_pcs.null2.transposed.tsv"
    threads: 2
    resources:
        mem_mb = lambda wc, attempt:  mem_step_size + mem_step_size * attempt
    shell:
        """
        set -euo pipefail

        plink_prefix=$(dirname {input.vcf})/$(basename {input.vcf} .bed)
        diff <(cut -f2 ${{plink_prefix}}.fam) <(tail -n+2 {input.cov} | cut -f1)

        plink_prefix_null=$(dirname {input.vcf_null})/$(basename {input.vcf_null} .bed)
        tmp_dir=covariates_null
        paste <(cut -f2 ${{plink_prefix_null}}.fam) <(tail -n+2 {input.cov} | cut -f 2-11) | sort -k1,1 > $tmp_dir/null_pcs.tsv
        (head -n1 {input.cov}; paste $tmp_dir/null_pcs.tsv <(tail -n+2 {input.cov} | cut -f12-)) > {output[0]}
        cat {output[0]} | ./transpose_tsv.R > {output[1]}        

        rm $tmp_dir/null_pcs.tsv 
        
        """


chrom_methy_file="bed_files/betas.sorted_samples.invnorm.ids_fixed.samples_filtered.{chrom}.bed.gz"
chrom_genotype_file="genotypes/{chrom}.pass_variants.bim"


rule permutation_scan_exclude_chunk:
    input:
        genotype_bim_file=chrom_genotype_file,
        phenotype_bed_file=chrom_methy_file,
        covariates_file="covariates/sex_gpcs_mpcs.transposed.tsv"
    output:
        "permute_scan/exclude/temp/permute.{chrom}.chunk_{chunk}.mpcs_{mpcs}.cis_qtl.tsv.gz"
    threads: 16
    resources:
        mem_mb = lambda wc, attempt:  mem_step_size + mem_step_size * attempt
    shell:
        """
        #!/bin/bash

        export OMP_NUM_THREADS={threads}
        export MKL_NUM_THREADS={threads}
        echo "threads: {threads}"
        env | grep THREADS
        set +e
        set -uo pipefail
        tmp_dir=`mktemp -d`
        tmp_prefix=${{tmp_dir}}/$(basename {output} .cis_qtl.tsv.gz)
        tmp_out=${{tmp_prefix}}.cis_qtl.txt.gz
        chunk_bed_file=${{tmp_dir}}/betas.{wildcards.chrom}.{wildcards.chunk}.bed.gz
        cov_file="$tmp_dir/cov_file.tsv"
        head -n $(( 12 + {wildcards.mpcs})) {input.covariates_file} > $cov_file

        echo "Subsetting BED file ..." >&2
        (zcat {input.phenotype_bed_file} | head -n1; zcat {input.phenotype_bed_file} | tail -n+2 | tail -n+$(( 1 + {wildcards.chunk} * {config[chunk_size]} )) | head -n{config[chunk_size]}) | bgzip > $chunk_bed_file

        python3 -m tensorqtl $(dirname {input.genotype_bim_file})/$(basename {input.genotype_bim_file} .bim) $chunk_bed_file $tmp_prefix  --mode cis --maf_threshold 0.001 --covariates $cov_file --window 1000000 --qvalue_lambda 0 --seed 2023 --permutations 1000 --invnorm 
        rc=$?        

        if [[ $rc == 0 && {wildcards.chunk} == 0 ]]; then
          mv $tmp_out {output}
          rc=$?
        elif [[ $rc == 0 ]]; then
          echo "Removing header from output and recompressing ..." >&2
          zcat $tmp_out | tail -n+2 | bgzip > ${{tmp_out}}.no_header && mv ${{tmp_out}}.no_header {output}
          rc=$?
        fi

        rm -r $tmp_dir
        exit $rc
        """


def num_chunks_for_chrom(input_file):
    with gzip.open(input_file) as f:
        n_lines = sum(1 for _ in f) - 1
        if n_lines > 0:
            return int(math.ceil(n_lines / config["chunk_size"]))
    return 0;


chrom_methy_file="bed_files/betas.sorted_samples.invnorm.ids_fixed.samples_filtered.{chrom}.bed.gz"
chrom_genotype_file="genotypes/{chrom}.pass_variants.bim"


rule permutation_scan_exclude:
    input:
        lambda wc: [rules.permutation_scan_exclude_chunk.output[0].format(chunk=c, chrom=wc.chrom, mpcs=wc.mpcs) for c in range(0, num_chunks_for_chrom(chrom_methy_file.format(chrom=wc.chrom)))]
    output:
        "permute_scan/exclude/permute.{chrom}.mpcs_{mpcs}.cis_qtl.tsv.gz"
    threads: 2
    resources:
        mem_mb = lambda wc, attempt:  mem_step_size + mem_step_size * attempt
    shell:
        """
        cat {input} > {output}
        """
